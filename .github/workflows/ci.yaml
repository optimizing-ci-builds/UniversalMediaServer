name: Universal Media Server CI

on: [push]

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        # test against two different xcode version on MacOS
        xcode: [ 9.4.1, latest ]
        java-version: [ 17 ]
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/UniversalMediaServer/UniversalMediaServer/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'optimizing-ci-builds'
      - run: touch starting_macos_uses-checkout_14
      - run: rm starting_macos_uses-checkout_14
      - uses: actions/checkout@v3
      - run: touch starting_macos_SetupJDKmatrixjavaversion_15
      - run: rm starting_macos_SetupJDKmatrixjavaversion_15
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'liberica'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - run: touch starting_macos_CachelocalMavenrepository_21
      - run: rm starting_macos_CachelocalMavenrepository_21
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - run: touch starting_macos_RuntestsXCodematrixxcode_28
      - run: rm starting_macos_RuntestsXCodematrixxcode_28
      - name: Run tests (XCode ${{ matrix.xcode }})
        run: DEVELOPER_DIR=/Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer && mvn verify -P testing-macos
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Check script file exists and execute
        if: always()
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: .github/workflows/script.py
      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          python .github/workflows/script.py
      - name: Checkout to destination CI-analyzes repo
        uses: actions/checkout@v3
        if: always()
        with:
          path: UniversalMediaServer
          ref: '1680027043-4d6beb9'
          repository: 'UT-SE-Research/ci-analyzes'
          token: '${{ secrets.API_TOKEN_GITHUB }}'
          persist-credentials: true
      - name: Copy files to push to another directory
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          mkdir -p UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/macos_xcode_${{ matrix.xcode }}_java-version_${{ matrix.java-version }}
          cp -rvT optimizing-ci-builds-ci-analysis UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/macos_xcode_${{ matrix.xcode }}_java-version_${{ matrix.java-version }}
      - run: echo https://github.com/UT-SE-Research/ci-analyzes/tree/1680027043-4d6beb9/UniversalMediaServer/.github/workflows/ci.yaml/macos_xcode_${{ matrix.xcode }}_java-version_${{ matrix.java-version }}
      - name: Pushes analysis to another repository
        if: steps.check_files.outputs.files_exists == 'true'
        working-directory: UniversalMediaServer
        run: |
          commit_message=$GITHUB_REPOSITORY@$GITHUB_WORKFLOW_SHA
          git config --global user.name 'UT-SE-Research'
          git config --global user.email '${{ secrets.EMAIL }}'
          git add .
          git commit -m $commit_message
          while ! git push -f origin 1680027043-4d6beb9; do
            git pull --rebase origin 1680027043-4d6beb9
            sleep $((RANDOM % 5 + 1))
          done

  windows-latest:
    runs-on: windows-latest
    strategy:
      matrix:
        java-version: [ 17 ]
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/UniversalMediaServer/UniversalMediaServer/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'optimizing-ci-builds'
      - run: touch starting_windowslatest_uses-checkout_37
      - run: rm starting_windowslatest_uses-checkout_37
      - uses: actions/checkout@v3
      - run: touch starting_windowslatest_SetupJDKmatrixjavaversion_38
      - run: rm starting_windowslatest_SetupJDKmatrixjavaversion_38
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'liberica'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - run: touch starting_windowslatest_CachelocalMavenrepository_44
      - run: rm starting_windowslatest_CachelocalMavenrepository_44
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - run: touch starting_windowslatest_Runlinterandtests_51
      - run: rm starting_windowslatest_Runlinterandtests_51
      - name: Run linter and tests
        run: mvn verify -P linter
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Check script file exists and execute
        if: always()
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: .github/workflows/script.py
      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          python .github/workflows/script.py
      - name: Checkout to destination CI-analyzes repo
        uses: actions/checkout@v3
        if: always()
        with:
          path: UniversalMediaServer
          ref: '1680027043-4d6beb9'
          repository: 'UT-SE-Research/ci-analyzes'
          token: '${{ secrets.API_TOKEN_GITHUB }}'
          persist-credentials: true
      - name: Copy files to push to another directory
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          mkdir -p UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/windowslatest_java-version_${{ matrix.java-version }}
          cp -rvT optimizing-ci-builds-ci-analysis UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/windowslatest_java-version_${{ matrix.java-version }}
      - run: echo https://github.com/UT-SE-Research/ci-analyzes/tree/1680027043-4d6beb9/UniversalMediaServer/.github/workflows/ci.yaml/windowslatest_java-version_${{ matrix.java-version }}
      - name: Pushes analysis to another repository
        if: steps.check_files.outputs.files_exists == 'true'
        working-directory: UniversalMediaServer
        run: |
          commit_message=$GITHUB_REPOSITORY@$GITHUB_WORKFLOW_SHA
          git config --global user.name 'UT-SE-Research'
          git config --global user.email '${{ secrets.EMAIL }}'
          git add .
          git commit -m $commit_message
          while ! git push -f origin 1680027043-4d6beb9; do
            git pull --rebase origin 1680027043-4d6beb9
            sleep $((RANDOM % 5 + 1))
          done

  linux-bionic:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        java-version: [ 17 ]

    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/UniversalMediaServer/UniversalMediaServer/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'optimizing-ci-builds'
      - run: touch starting_linuxbionic_uses-checkout_61
      - run: rm starting_linuxbionic_uses-checkout_61
      - uses: actions/checkout@v3
      - run: touch starting_linuxbionic_SetupJDKmatrixjavaversion_62
      - run: rm starting_linuxbionic_SetupJDKmatrixjavaversion_62
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'liberica'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - run: touch starting_linuxbionic_CachelocalMavenrepository_68
      - run: rm starting_linuxbionic_CachelocalMavenrepository_68
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - run: touch starting_linuxbionic_Runtests_75
      - run: rm starting_linuxbionic_Runtests_75
      - name: Run tests
        run: |
          sudo apt-get -y install libmms0
          wget https://mediaarea.net/download/binary/libzen0/0.4.39/libzen0v5_0.4.39-1_amd64.xUbuntu_18.04.deb
          sudo dpkg -i libzen0v5_0.4.39-1_amd64.xUbuntu_18.04.deb
          wget https://mediaarea.net/download/binary/libmediainfo0/22.03/libmediainfo0v5_22.03-1_amd64.xUbuntu_18.04.deb
          sudo dpkg -i libmediainfo0v5_22.03-1_amd64.xUbuntu_18.04.deb
          mvn verify -P testing
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Check script file exists and execute
        if: always()
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: .github/workflows/script.py
      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          python .github/workflows/script.py
      - name: Checkout to destination CI-analyzes repo
        uses: actions/checkout@v3
        if: always()
        with:
          path: UniversalMediaServer
          ref: '1680027043-4d6beb9'
          repository: 'UT-SE-Research/ci-analyzes'
          token: '${{ secrets.API_TOKEN_GITHUB }}'
          persist-credentials: true
      - name: Copy files to push to another directory
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          mkdir -p UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/linuxbionic_java-version_${{ matrix.java-version }}
          cp -rvT optimizing-ci-builds-ci-analysis UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/linuxbionic_java-version_${{ matrix.java-version }}
      - run: echo https://github.com/UT-SE-Research/ci-analyzes/tree/1680027043-4d6beb9/UniversalMediaServer/.github/workflows/ci.yaml/linuxbionic_java-version_${{ matrix.java-version }}
      - name: Pushes analysis to another repository
        if: steps.check_files.outputs.files_exists == 'true'
        working-directory: UniversalMediaServer
        run: |
          commit_message=$GITHUB_REPOSITORY@$GITHUB_WORKFLOW_SHA
          git config --global user.name 'UT-SE-Research'
          git config --global user.email '${{ secrets.EMAIL }}'
          git add .
          git commit -m $commit_message
          while ! git push -f origin 1680027043-4d6beb9; do
            git pull --rebase origin 1680027043-4d6beb9
            sleep $((RANDOM % 5 + 1))
          done

  linux-focal:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java-version: [ 17 ]

    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas
          pip install numpy
      - run: sudo apt update
      - run: sudo apt install inotify-tools
      - run: inotifywait -mr /home/runner/work/UniversalMediaServer/UniversalMediaServer/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'optimizing-ci-builds'
      - run: touch starting_linuxfocal_uses-checkout_91
      - run: rm starting_linuxfocal_uses-checkout_91
      - uses: actions/checkout@v3
      - run: touch starting_linuxfocal_SetupJDKmatrixjavaversion_92
      - run: rm starting_linuxfocal_SetupJDKmatrixjavaversion_92
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'liberica'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - run: touch starting_linuxfocal_CacheMavenpackages_98
      - run: rm starting_linuxfocal_CacheMavenpackages_98
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - run: touch starting_linuxfocal_Runtests_104
      - run: rm starting_linuxfocal_Runtests_104
      - name: Run tests
        run: |
          sudo apt-get -y install libmms0
          wget https://mediaarea.net/download/binary/libzen0/0.4.39/libzen0v5_0.4.39-1_amd64.xUbuntu_20.04.deb
          sudo dpkg -i libzen0v5_0.4.39-1_amd64.xUbuntu_20.04.deb
          wget https://mediaarea.net/download/binary/libmediainfo0/22.03/libmediainfo0v5_22.03-1_amd64.xUbuntu_20.04.deb
          sudo dpkg -i libmediainfo0v5_22.03-1_amd64.xUbuntu_20.04.deb
          mvn verify -P testing
      - run: touch starting_finished_finished_8979874
        if: always()
      - run: rm starting_finished_finished_8979874
        if: always()
      - name: Check script file exists and execute
        if: always()
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: .github/workflows/script.py
      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          python .github/workflows/script.py
      - name: Checkout to destination CI-analyzes repo
        uses: actions/checkout@v3
        if: always()
        with:
          path: UniversalMediaServer
          ref: '1680027043-4d6beb9'
          repository: 'UT-SE-Research/ci-analyzes'
          token: '${{ secrets.API_TOKEN_GITHUB }}'
          persist-credentials: true
      - name: Copy files to push to another directory
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          mkdir -p UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/linuxfocal_java-version_${{ matrix.java-version }}
          cp -rvT optimizing-ci-builds-ci-analysis UniversalMediaServer/UniversalMediaServer/.github/workflows/ci.yaml/linuxfocal_java-version_${{ matrix.java-version }}
      - run: echo https://github.com/UT-SE-Research/ci-analyzes/tree/1680027043-4d6beb9/UniversalMediaServer/.github/workflows/ci.yaml/linuxfocal_java-version_${{ matrix.java-version }}
      - name: Pushes analysis to another repository
        if: steps.check_files.outputs.files_exists == 'true'
        working-directory: UniversalMediaServer
        run: |
          commit_message=$GITHUB_REPOSITORY@$GITHUB_WORKFLOW_SHA
          git config --global user.name 'UT-SE-Research'
          git config --global user.email '${{ secrets.EMAIL }}'
          git add .
          git commit -m $commit_message
          while ! git push -f origin 1680027043-4d6beb9; do
            git pull --rebase origin 1680027043-4d6beb9
            sleep $((RANDOM % 5 + 1))
          done
